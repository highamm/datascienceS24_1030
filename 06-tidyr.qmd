---
title: "Section 6: tidyr"
author: "Matt Higham"
format: 
  html:
    embed-resources: true
---

```{r}
library(tidyverse)
library(here)
prices_df <- read_csv(here("data/UBSprices2.csv"))
prices_df
```

Class Exercise 2.

There are variables that are spread out over multiple columns (for example, there should be a column for year).

Class Exercise 3.

```{r}
prices_rice <- prices_df |> pivot_longer(2:7, names_to = "temp",
                          values_to = "price") |>
  separate(temp, into = c("commodity", "year"),
           sep = -4) |>
  filter(commodity == "rice")
prices_rice

ggplot(data = prices_rice, aes(x = year, y = price, group = city)) +
  geom_line(alpha = 0.4)
```

Class Exercise 4.

```{r}
prices_amsterdam <- prices_df |> pivot_longer(2:7, names_to = "temp",
                          values_to = "price") |>
  separate(temp, into = c("commodity", "year"),
           sep = -4) |>
  filter(city == "Amsterdam")

ggplot(data = prices_amsterdam, aes(x = year, y = price)) +
  geom_line(aes(colour = commodity, group = commodity)) +
  scale_colour_viridis_d() +
  theme_minimal()
```

Class Exercises 5 through 7

```{r}
mortality_df <- read_csv(here("data/under5mortality.csv"))
head(mortality_df)

mortality_long <- mortality_df |> pivot_longer(2:217, names_to = "year",
                             values_to = "mortality",
                             names_transform = list(year = as.numeric)) |>
  rename(country = `Under five mortality`)

ggplot(data = mortality_long, aes(x = year, y = mortality,
                                  group = country)) +
  geom_line(alpha = 0.2)

## some countries are completely flat between 1800 and 1900-
## possibly the data set is using some average for each of these countries.
```

Your Turn 1.

```{r}
library(tidyverse)
library(here)
baseball_df <- read_csv(here("data/mlb2016.csv"))
head(baseball_df)
```

Your Turn 1. The values in salary, total.value, etc., contain dollar signs but tidy data should not have units in the values themselves. The column Years actually contains three variables: duration, a start year, an end year.

Your Turn 2 through Turn 4.

```{r}
baseball_clean <- baseball_df |>
  separate(Years, into = c("Duration", "Range"),
           sep = " ") |>
  separate(Range, into = c("Start", "End"),
           sep = "-")  |>
  mutate(Salary = parse_number(Salary),
         Total.Value = parse_number(Total.Value),
         Avg.Annual = parse_number(Avg.Annual),
         Start = parse_number(Start),
         End = parse_number(End)) |>
  mutate(End = 2000 + End)

## there are single year contracts where no dash
## is present so separate() cannot work on these rows
```

Your Turn 5.

```{r}
ggplot(data = baseball_clean, aes(x = POS, y = Salary)) +
  geom_boxplot(colour = "skyblue4", fill = "skyblue1") +
  theme_minimal()

ggplot(data = baseball_clean, aes(POS, y = Salary)) +
  geom_jitter(width = 0.10) +
  theme_minimal()

ggplot(data = baseball_clean, aes(x = POS, y = Salary)) +
  geom_violin(colour = "skyblue4", fill = "skyblue1") +
  theme_minimal()

## BAD: sums salary for each position: 
## so positions with a larger sample size "appear"
## to have a higher average when that's not true
ggplot(data = baseball_clean, aes(x = POS, y = Salary)) +
  geom_col()
## useful only if y is a count variable

## BAD: only shows center (not outliers, spread, or shape).
baseball_sum <- baseball_clean |> group_by(POS) |>
  summarise(mean_salary = mean(Salary))
ggplot(data = baseball_sum, aes(x = POS, y = mean_salary)) +
  geom_col()
```