---
title: "Section 8: forcats"
author: "Matt Higham"
format: 
  html:
    embed-resources: true
---


```{r}
library(tidyverse)
library(here)
pokemon_df <- read_csv(here("data/pokemon_allgen.csv")) |>
  mutate(Generation_cat = factor(Generation))
```

Class Exercises

Class Exercise 1. Lollipop plots are not great for quantitative variables (cannot see spread, shape, outliers, etc.), but they are often useful for counts (like number of times a team makes a playoff, number of births for different names).

Class Exercise 2. group_by(#) |> slice(1) |> ungroup() says keep only the first row for each unique pokemon number.

```{r}
pokemon_df |> distinct(`#`, .keep_all = TRUE)
```

Class Exercise 3.

```{r}
pokemon_nodup <- pokemon_df |> group_by(`#`) |> slice(1) ## |>
  ## ungroup()
pokemon_long <- pokemon_nodup |>
  pivot_longer(c(`Type 1`, `Type 2`),
               names_to = "Number",
               values_to = "Type")

pokemon_long <- pokemon_long |>
  filter(!is.na(Type)) |>
  mutate(Type_Deford = fct_reorder(.f = Type, .x = Defense,
                                   .fun = median))
ggplot(data = pokemon_long, aes(x = Type_Deford,
                               y = Defense)) +
  geom_boxplot() + 
  coord_flip()
```

This is trying to reorder the factor type within each # group. This does not make sense. This is a common issue with forcats: it does not generally like grouped data when it is re-ordering.



```{r}
library(tidyverse)
library(here)
standings_df <- read_csv(here("data/standings.csv"))
standings_df
```

Your Turn 1 and Your Turn 5

```{r}
table(standings_df$team_name)
```

Your Turns 2 through 4

```{r}
playoffs_top <- standings_df |> 
  mutate(team_name = fct_recode(team_name,
                                "Commanders" = "Redskins")) |>
  unite("franchise", c(team, team_name), sep = " ") |>
  mutate(franchise = fct_collapse(franchise,
                                  "San Diego / LA Chargers" = c("San Diego Chargers", "Los Angeles Chargers"),
                                  "St. Louis / LA Rams" = c("St. Louis Rams", "Los Angeles Rams"))) |>
  mutate(playoffs_logical = if_else(playoffs == "Playoffs",
                                                  true = 1,
                                                  false = 0)) |>
  relocate(playoffs, playoffs_logical) |>
  group_by(franchise) |>
  summarise(total_playoffs = sum(playoffs_logical)) |>
  arrange(desc(total_playoffs)) |>
  slice(1:10) |>
  mutate(franchise = fct_reorder(franchise, total_playoffs))

standings_df |> filter(playoffs == "Playoffs") |>
  relocate(playoffs) |>
  group_by(team_name) |>
  summarise(total_playoffs = n()) |>
  arrange(desc(total_playoffs)) |>
  slice(1:10)

ggplot(data = playoffs_top) +
    geom_segment(aes(x = franchise, xend = franchise,
                   y = 0, yend = total_playoffs), colour = "skyblue1") +
  geom_point(aes(x = franchise, y = total_playoffs), colour = "skyblue4") +

  coord_flip() +
  theme_minimal() +
  labs(y = "number of playoffs")
```

team_name | number_of_playoffs
Patriots | 10
Bills | 5

